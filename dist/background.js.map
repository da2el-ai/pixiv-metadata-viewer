{"version":3,"file":"background.js","sources":["../src/background/index.ts"],"sourcesContent":["/**\n * バックグラウンドスクリプト\n * メタデータの取得と解析を担当\n */\nimport { CONFIG } from '../constants';\n\n/**\n * PNG画像のテキストチャンクを解析\n */\nasync function parsePngTextChunks(buf: ArrayBuffer): Promise<any> {\n  const u8 = new Uint8Array(buf);\n  const dv = new DataView(buf);\n  \n  // PNG署名チェック\n  const sig = [137, 80, 78, 71, 13, 10, 26, 10];\n  for (let i = 0; i < 8; i++) {\n    if (u8[i] !== sig[i]) {\n      throw new Error('PNG署名が一致しません');\n    }\n  }\n  \n  let off = 8;\n  const latin1 = new TextDecoder('latin1');\n  const utf8 = new TextDecoder();\n  const items = [];\n  \n  while (off + 8 <= dv.byteLength) {\n    const len = dv.getUint32(off);\n    off += 4;\n    \n    if (off + 4 > dv.byteLength) break;\n    \n    const type = String.fromCharCode(u8[off], u8[off+1], u8[off+2], u8[off+3]);\n    off += 4;\n    \n    if (off + len + 4 > dv.byteLength) break; // 範囲外\n    \n    const data = u8.slice(off, off + len);\n    off += len;\n    \n    const _crc = dv.getUint32(off);\n    off += 4;\n\n    try {\n      if (type === 'tEXt') {\n        // 非圧縮テキスト\n        const sep = data.indexOf(0);\n        const keyword = latin1.decode(data.slice(0, sep));\n        const text = latin1.decode(data.slice(sep + 1));\n        items.push({ type, keyword, text });\n      } else if (type === 'iTXt') {\n        // 国際テキスト\n        let p = 0;\n        const i0 = data.indexOf(0, p);\n        const keyword = latin1.decode(data.slice(p, i0));\n        p = i0 + 1;\n        \n        const compFlag = data[p++];\n        const compMethod = data[p++];\n        \n        const i1 = data.indexOf(0, p);\n        const languageTag = latin1.decode(data.slice(p, i1));\n        p = i1 + 1;\n        \n        const i2 = data.indexOf(0, p);\n        const translatedKeyword = utf8.decode(data.slice(p, i2));\n        p = i2 + 1;\n        \n        const textBytes = data.slice(p);\n        let text;\n        \n        if (compFlag === 1) {\n          text = await inflateToString(textBytes); // zlib圧縮\n        } else {\n          text = utf8.decode(textBytes);\n        }\n        \n        items.push({\n          type,\n          keyword,\n          text,\n          languageTag,\n          translatedKeyword,\n          compMethod\n        });\n      } else if (type === 'zTXt') {\n        // 圧縮テキスト\n        const sep = data.indexOf(0);\n        const keyword = latin1.decode(data.slice(0, sep));\n        const compMethod = data[sep + 1];\n        const compressed = data.slice(sep + 2);\n        const text = await inflateToString(compressed);\n        items.push({ type, keyword, text, compMethod });\n      }\n    } catch (e) {\n      items.push({ type, keyword: 'parse-error', text: String(e) });\n    }\n\n    if (type === 'IEND') break;\n  }\n  \n  return { items };\n}\n\n/**\n * 圧縮データを展開してテキストに変換\n */\nasync function inflateToString(u8: Uint8Array): Promise<string> {\n  if (typeof DecompressionStream === 'function') {\n    try {\n      const blob = new Blob([u8 as unknown as BlobPart]);\n      const stream = new Response(\n        blob.stream().pipeThrough(new DecompressionStream('deflate'))\n      );\n      const ab = await stream.arrayBuffer();\n      return new TextDecoder().decode(ab);\n    } catch (e) {\n      // deflate-rawを試す\n      try { \n        const blob = new Blob([u8 as unknown as BlobPart]);\n        const stream = new Response(\n          blob.stream().pipeThrough(new DecompressionStream('deflate-raw'))\n        );\n        const ab = await stream.arrayBuffer();\n        return new TextDecoder().decode(ab);\n      } catch (e) {\n        // どちらも失敗\n      }\n    }\n  }\n  \n  throw new Error('DecompressionStream未対応のため圧縮テキストを展開できません');\n}\n\n\n/**\n * 画像からメタデータを取得\n */\nasync function fetchAndParseMetadata(url: string): Promise<any> {\n  // 画像を取得\n  const res = await fetch(url, {\n    // DNRでRefererは強制付与される想定\n    credentials: 'omit',\n    cache: 'no-cache',\n    mode: 'cors'\n  });\n  \n  if (!res.ok) {\n    throw new Error(`画像取得に失敗: HTTP ${res.status}`);\n  }\n  \n  const buf = await res.arrayBuffer();\n  \n  try {\n    // 拡張子に基づいて解析\n    let parsed;\n    const urlLower = url.toLowerCase();\n    \n    if (urlLower.endsWith('.png')) {\n      parsed = await parsePngTextChunks(buf);\n    } else {\n      // PNG以外の形式の場合は何もせず処理を完了\n      console.log('PNG以外の画像を検出しました。処理を完了します。');\n      return { \n        ok: true, \n        isNotPng: true,\n        parsed: { items: [] }, \n        bytes: buf.byteLength \n      };\n    }\n    \n    // summary の生成部分を削除\n    return { ok: true, parsed, bytes: buf.byteLength };\n  } catch (e) {\n    console.log('メタデータ解析エラー:', e);\n    // エラーが発生しても空の結果を返す\n    return { ok: true, parsed: { items: [] }, bytes: buf.byteLength };\n  }\n}\n\n/**\n * 拡張機能アイコンのクリックイベント\n */\nchrome.action.onClicked.addListener((tab) => {\n  if (tab.id) {\n    chrome.tabs.sendMessage(tab.id, { type: 'TOGGLE_PANEL' });\n  }\n});\n\n/**\n * メッセージハンドラ\n */\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message && message.type === 'GET_METADATA') {\n    (async () => {\n      try {\n        const { imageUrls } = message;\n        \n        if (!imageUrls || !Array.isArray(imageUrls) || imageUrls.length === 0) {\n          sendResponse({ success: false, log: '有効な画像URLが指定されていません' });\n          return;\n        }\n        \n        // 画像URLを順番に試行\n        for (const url of imageUrls) {\n          try {\n            const metadata = await fetchAndParseMetadata(url);\n            sendResponse({ success: true, metadata, url });\n            return;\n          } catch (err: any) {\n            // 404の場合は次のURLを試す、それ以外はエラー\n            if (err.message.includes('HTTP 404')) {\n              continue;\n            }\n            // PNG以外の形式はまだサポートされていない場合も次のURLを試す\n            if (err.message.includes('PNG以外の形式はまだサポートされていません')) {\n              continue;\n            }\n            throw err;\n          }\n        }\n        \n        // すべてのURLで失敗\n        sendResponse({ success: false, log: 'メタデータが見つかりません' });\n      } catch (e: any) {\n        sendResponse({ success: false, log: e.message || String(e) });\n      }\n    })();\n    return true; // 非同期レスポンス\n  }\n});\n"],"names":["parsePngTextChunks","buf","u8","dv","sig","off","latin1","utf8","items","len","type","data","sep","keyword","text","p","i0","compFlag","compMethod","i1","languageTag","i2","translatedKeyword","textBytes","inflateToString","compressed","e","blob","ab","fetchAndParseMetadata","url","res","parsed","tab","message","sender","sendResponse","imageUrls","metadata","err"],"mappings":"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"}