{"version":3,"file":"content.js","sources":["../src/constants.ts","../src/content/badge.ts","../src/content/utils.ts","../src/content/parsePrompt.ts","../src/content/panel.ts","../src/content/index.ts"],"sourcesContent":["/**\n * 設定値を定数として定義\n */\nexport const CONFIG = {\n  // 対象となる画像URLのパターン\n  IMAGE_URL_PATTERNS: [\n    /https:\\/\\/i\\.pximg\\.net\\/.*\\/?img-master\\/img\\/(.+_p\\d+)_(master|square)\\d*.jpg/\n  ],\n  \n  // オリジナル画像URLの生成パターン\n  ORIGINAL_URL_TEMPLATE: 'https://i.pximg.net/img-original/img/$1.$2',\n  \n  // 試行する画像形式（優先順）\n  // IMAGE_FORMATS: ['png', 'jpg', 'webp'],\n  IMAGE_FORMATS: ['png'],\n  \n  // ホバー遅延時間（ミリ秒）\n  HOVER_DELAY: 300,\n  \n  // パネル非表示遅延時間（ミリ秒）\n  HIDE_DELAY: 200\n};\n","/**\n * メタデータバッジ\n * 画像上に表示するメタデータバッジを担当\n */\n\n/**\n * メタデータバッジを作成\n */\nexport function createBadge(imgElement: HTMLImageElement): void {\n  // 画像の親要素\n  const imgParent = imgElement.parentElement;\n\n  // 既存のバッジがあれば何もしない\n  if( imgParent && imgParent.querySelectorAll('.d2-meta-badge').length){\n    return;\n  }\n  \n  // バッジ要素を作成\n  const badge = document.createElement('div');\n  badge.className = 'd2-meta-badge';\n  badge.textContent = 'META';\n  \n  // 画像の位置に合わせて配置\n  const rect = imgElement.getBoundingClientRect();\n  \n  if (imgParent) {\n    const computedStyle = window.getComputedStyle(imgParent);\n    if(!['relative', 'absolute', 'fixed'].includes(computedStyle.position)){\n      imgParent.style.position = 'relative';\n    }\n    imgParent.appendChild(badge);\n  }\n}\n","/**\n * ユーティリティ関数\n */\n\n/**\n * HTMLエスケープ\n */\nexport function escapeHtml(text: string): string {\n  if (!text) return '';\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n","/**\n * プロンプト解析\n * メタデータからプロンプト情報を抽出する処理を担当\n */\n\n/**\n * StableDiffusion/NovelAIのプロンプト情報を抽出\n */\nexport interface SummaryData {\n  software?: string;\n  prompt?: string;\n  negative?: string;\n  sampler?: string;\n  steps?: string;\n  cfg?: string;\n  seed?: string;\n  model?: string;\n  size?: string;\n}\n\n/**\n * A1111方式\n */\nconst extractPromptA1111 = (parameters:any, summary:SummaryData) => {\n  if (!parameters || !parameters.text) return;\n\n  const params = parameters.text;\n  // console.log(\"[extractPromptA1111]\", params);\n  const negMatch = params.match(/Negative prompt:\\s*([\\s\\S]*?)(?:\\n[A-Z][\\w ]+:\\s|$)/i);\n  if (negMatch) summary.negative = negMatch[1].trim();\n\n  const paramsLine = (params.match(/^(?:.*?(?:Steps:|Sampler:|CFG|Seed|Model|Size).*?)$/gmi) || [])[0];\n  if (paramsLine) {\n    paramsLine.split(',').forEach((pair:string) => {\n      const idx = pair.indexOf(':');\n      if (idx === -1) return;\n      const k = pair.slice(0, idx).trim().toLowerCase();\n      const v = pair.slice(idx + 1).trim();\n      if (k.startsWith('steps')) summary.steps = v;\n      else if (k.startsWith('sampler')) summary.sampler = v;\n      else if (k.startsWith('cfg')) summary.cfg = v;\n      else if (k.startsWith('seed')) summary.seed = v;\n      else if (k.startsWith('model')) summary.model = v;\n      else if (k.includes('size')) summary.size = v;\n    });\n  }\n\n  // ポジティブプロンプト（A1111）: \"Negative prompt:\"の前のすべて\n  if (!summary.prompt && /Negative prompt:/i.test(params)) {\n    const idx = params.search(/Negative prompt:/i);\n    summary.prompt = params.slice(0, idx).trim();\n  }\n};\n\n\n/**\n * NovelAI方式\n */\nconst extractPromptNAI = (comment: any, summary: SummaryData): void => {\n  if (!comment || !comment.text) return;\n  \n  try {\n    // JSON文字列をパース\n    // 最初と最後の \" を削除（JSONとして正しくパースするため）\n    const jsonText = comment.text.trim();\n    const jsonStr = jsonText.startsWith('\"') && jsonText.endsWith('\"') \n      ? jsonText.slice(1, -1) \n      : jsonText;\n    \n    // JSON文字列をパース（エスケープされた文字を処理）\n    const jsonObj = JSON.parse(jsonStr.replace(/\\\\\"/g, '\"'));\n    \n    // 指定されたパスからプロンプト情報を抽出\n    if (jsonObj.v4_prompt?.caption?.base_caption) {\n      summary.prompt = jsonObj.v4_prompt.caption.base_caption;\n\n      // キャラクタープロンプト\n      if(jsonObj.v4_prompt?.caption?.char_captions){\n        summary.prompt += \"\\n\\nCharacter Prompt:\\n\";\n        jsonObj.v4_prompt.caption.char_captions.forEach((charaCption: any) => {\n          summary.prompt += \"\\n\" + charaCption.char_caption + \"\\n\";\n        });\n      }\n    }\n    \n    if (jsonObj.v4_negative_prompt?.caption?.base_caption) {\n      summary.negative = jsonObj.v4_negative_prompt.caption.base_caption;\n    }\n    \n    // その他の情報も抽出\n    if (jsonObj.sampler) summary.sampler = jsonObj.sampler;\n    if (jsonObj.steps) summary.steps = String(jsonObj.steps);\n    if (jsonObj.scale) summary.cfg = String(jsonObj.scale);\n    if (jsonObj.seed) summary.seed = String(jsonObj.seed);\n    if (jsonObj.height && jsonObj.width) summary.size = `${jsonObj.width}x${jsonObj.height}`;\n    \n    // ソフトウェア情報\n    summary.software = 'NovelAI';\n    \n  } catch (e) {\n    console.log('NovelAI JSONパースエラー:', e);\n  }\n};\n\n\n/**\n * メタデータからプロンプト情報を抽出\n */\nexport function extractSummary(items: any[]): SummaryData {\n\n    const summary: SummaryData = {\n        software: \"\",\n        prompt: undefined,\n        negative: undefined,\n        sampler: undefined,\n        steps: undefined,\n        cfg: undefined,\n        seed: undefined,\n        model: undefined,\n        size: undefined\n    };\n\n    const parameters = items.find(item => item.keyword === 'parameters') || '';\n    const comment = items.find(item => item.keyword === 'Comment') || '';\n\n    if(parameters){\n        extractPromptA1111(parameters, summary);\n    }else if(comment){\n        extractPromptNAI(comment, summary)\n    }\n\n//   // テキストを結合\n//   const allText = items.map((e: any) => {\n//     return `[${e.type}:${e.keyword}] ${e.text}`\n//   }).join('\\n');\n\n//   // 何も見つからなかった場合は\"parameters\"ブロックを試す\n//   const paramBlock = allText.match(/parameters\\W([\\s\\S]+)$/i);\n//   if (!summary.prompt && paramBlock) summary.prompt = paramBlock[1].trim();\n\n  return summary;\n}\n","/**\n * メタデータパネル\n * 画面下部に表示するメタデータパネルを担当\n */\nimport { CONFIG } from '../constants';\nimport { escapeHtml } from './utils';\nimport { extractSummary } from './parsePrompt';\n\n// 状態管理\nlet currentMetadata: any = null;\nlet hideTimer: number | null = null;\n\n/**\n * メタデータパネルを作成\n */\nfunction createPanel(): HTMLElement {\n  // 既存のパネルがあれば削除\n  const existingPanel = document.querySelector('.d2-meta-panel');\n  if (existingPanel) {\n    return existingPanel as HTMLElement;\n  }\n  \n  // パネル要素を作成\n  const panel = document.createElement('div');\n  panel.className = 'd2-meta-panel';\n  panel.setAttribute('data-position', 'bottom');\n  \n  // リサイズハンドル：上\n  const resizeHandleTop = document.createElement('div');\n  resizeHandleTop.classList.add('d2-meta-panel__resize', 'd2-meta-panel__resize--top');\n  resizeHandleTop.innerHTML = '⋯';\n  resizeHandleTop.title = 'ドラッグしてリサイズ';\n  panel.appendChild(resizeHandleTop);\n\n  // ボタンエリア\n  const navContainer = document.createElement('div');\n  navContainer.className = 'd2-meta-panel__nav-container';\n  panel.appendChild(navContainer);\n\n  // 位置変更ボタン\n  const positionButton = document.createElement('button');\n  positionButton.classList.add('d2-meta-panel__nav-btn', 'd2-meta-panel__nav-btn--position');\n  positionButton.title = '位置変更';\n  positionButton.addEventListener('click', () => {\n    const panel = document.querySelector('.d2-meta-panel');\n    if (panel) {\n      const currentPosition = panel.getAttribute('data-position');\n      if (currentPosition === 'top') {\n        panel.setAttribute('data-position', 'bottom');\n        positionButton.setAttribute('data-position', 'bottom');\n      } else {\n        panel.setAttribute('data-position', 'top');\n        positionButton.setAttribute('data-position', 'top');\n      }\n    }\n  });\n  navContainer.appendChild(positionButton);\n\n  // 閉じるボタン\n  const closeButton = document.createElement('button');\n  closeButton.classList.add('d2-meta-panel__nav-btn', 'd2-meta-panel__nav-btn--close');\n  closeButton.textContent = '×';\n  closeButton.title = '閉じる';\n  closeButton.addEventListener('click', () => {\n    hidePanel();\n  });\n  navContainer.appendChild(closeButton);\n\n\n  // コンテンツ部分\n  const content = document.createElement('div');\n  content.className = 'd2-meta-panel__layout';\n  panel.appendChild(content);\n  \n  // プロンプト部分\n  const promptSection = document.createElement('div');\n  promptSection.className = 'd2-meta-panel__prompt';\n  promptSection.style.backgroundColor = '#444';\n  content.appendChild(promptSection);\n  \n  // オリジナル部分\n  const originalSection = document.createElement('div');\n  originalSection.className = 'd2-meta-panel__original';\n  originalSection.style.backgroundColor = '#444';\n  content.appendChild(originalSection);\n\n  // リサイズハンドル：下\n  const resizeHandleBottom = document.createElement('div');\n  resizeHandleBottom.classList.add('d2-meta-panel__resize', 'd2-meta-panel__resize--bottom');\n  resizeHandleBottom.innerHTML = '⋯';\n  resizeHandleBottom.title = 'ドラッグしてリサイズ';\n  panel.appendChild(resizeHandleBottom);\n\n  // リサイズ機能\n  let startY = 0;\n  let startHeight = 0;\n  \n  // 上のリサイズハンドル\n  resizeHandleTop.addEventListener('mousedown', (e) => {\n    e.preventDefault();\n    startY = e.clientY;\n    startHeight = parseInt(getComputedStyle(panel).height, 10);\n    document.addEventListener('mousemove', resizePanelTop);\n    document.addEventListener('mouseup', stopResize);\n  });\n\n  // 下のリサイズハンドル\n  resizeHandleBottom.addEventListener('mousedown', (e) => {\n    e.preventDefault();\n    startY = e.clientY;\n    startHeight = parseInt(getComputedStyle(panel).height, 10);\n    document.addEventListener('mousemove', resizePanelBottom);\n    document.addEventListener('mouseup', stopResize);\n  });\n  \n  function resizePanelTop(e: MouseEvent) {\n    const newHeight = startHeight - (e.clientY - startY);\n    if (newHeight > 100) {\n      panel.style.height = `${newHeight}px`;\n    }\n  }\n\n  function resizePanelBottom(e: MouseEvent) {\n    const newHeight = startHeight + (e.clientY - startY);\n    if (newHeight > 100) {\n      panel.style.height = `${newHeight}px`;\n    }\n  }\n\n  function stopResize() {\n    document.removeEventListener('mousemove', resizePanelTop);\n    document.removeEventListener('mousemove', resizePanelBottom);\n    document.removeEventListener('mouseup', stopResize);\n  }\n  \n  document.body.appendChild(panel);\n  return panel;\n}\n\n/**\n * パネルのコンテンツを描画\n */\nfunction renderPanelContent(panel: HTMLElement, metadata: any): void {\n  const promptSection = panel.querySelector('.d2-meta-panel__prompt');\n  const originalSection = panel.querySelector('.d2-meta-panel__original');\n  \n  if (!promptSection || !originalSection) return;\n  \n  // メタデータが見つかるかどうかを判定\n  const hasMetadata = metadata.parsed && metadata.parsed.items && metadata.parsed.items.length > 0;\n  \n  // パネルの透明度を設定\n  panel.style.opacity = hasMetadata ? '1' : '0.5';\n  \n  // PNG以外の形式の場合\n  if (metadata.isNotPng) {\n    promptSection.innerHTML = '<p>PNG以外の画像形式のため、メタデータは表示されません。</p>';\n    originalSection.innerHTML = '';\n    return;\n  }\n  \n  // プロンプト情報を抽出\n  const summary = metadata.parsed && metadata.parsed.items ? \n    extractSummary(metadata.parsed.items) : {};\n\n  // プロンプト情報\n  let promptHtml = '';\n  \n  if (summary.prompt) {\n    promptHtml += `<h3>Prompt</h3><p style=\"white-space: pre-wrap;\">${escapeHtml(summary.prompt)}</p>`;\n  }\n  \n  if (summary.negative) {\n    promptHtml += `<h3>Negative Prompt</h3><p style=\"white-space: pre-wrap;\">${escapeHtml(summary.negative)}</p>`;\n  }\n  \n  // パラメータ情報\n  let paramsHtml = '<h3>Parameters</h3><ul>';\n  if (summary.sampler) paramsHtml += `<li>Sampler: ${escapeHtml(summary.sampler)}</li>`;\n  if (summary.steps) paramsHtml += `<li>Steps: ${escapeHtml(summary.steps)}</li>`;\n  if (summary.cfg) paramsHtml += `<li>CFG: ${escapeHtml(summary.cfg)}</li>`;\n  if (summary.seed) paramsHtml += `<li>Seed: ${escapeHtml(summary.seed)}</li>`;\n  if (summary.model) paramsHtml += `<li>Model: ${escapeHtml(summary.model)}</li>`;\n  if (summary.size) paramsHtml += `<li>Size: ${escapeHtml(summary.size)}</li>`;\n  if (summary.software) paramsHtml += `<li>Software: ${escapeHtml(summary.software)}</li>`;\n  paramsHtml += '</ul>';\n  \n  promptSection.innerHTML = promptHtml || '<p>プロンプト情報が見つかりませんでした。</p>';\n  originalSection.innerHTML = paramsHtml;\n  \n  // オリジナルデータ\n  if (metadata.parsed && metadata.parsed.items && metadata.parsed.items.length > 0) {\n    let originalHtml = '<h3>Original Data</h3><ul>';\n    metadata.parsed.items.forEach((item: any) => {\n      originalHtml += `<li><strong>${escapeHtml(item.keyword)}</strong>: <span style=\"white-space: pre-wrap;\">${escapeHtml(item.text)}</span></li>`;\n    });\n    originalHtml += '</ul>';\n    originalSection.innerHTML += originalHtml;\n  }\n}\n\n/**\n * パネルを表示\n */\nexport function showPanel(metadata: any): void {\n  \n  // パネルを作成または取得\n  const panel = createPanel();\n  \n  // 非表示タイマーをクリア\n  if (hideTimer) {\n    clearTimeout(hideTimer);\n    hideTimer = null;\n  }\n  \n  // メタデータを表示\n  renderPanelContent(panel, metadata);\n  \n  // パネルを表示\n  panel.setAttribute('data-is-show', 'true');\n  \n  // 状態更新\n  currentMetadata = metadata;\n}\n\n/**\n * パネルを非表示\n */\nexport function hidePanel(): void {\n  // 非表示タイマーをセット\n  if (hideTimer) clearTimeout(hideTimer);\n  \n  hideTimer = window.setTimeout(() => {\n    const panel = document.querySelector('.d2-meta-panel');\n    if (panel) {\n      panel.setAttribute('data-is-show', 'false');\n    }\n    hideTimer = null;\n  }, CONFIG.HIDE_DELAY);\n}\n\n/**\n * 現在のメタデータを取得\n */\nexport function getCurrentMetadata(): any {\n  return currentMetadata;\n}\n","/**\n * コンテンツスクリプト\n * pixivのページ上で実行され、画像の検出とUI表示を担当\n */\nimport { CONFIG } from '../constants';\nimport { createBadge } from './badge';\nimport { showPanel, hidePanel, getCurrentMetadata } from './panel';\n\n// 状態管理\nlet hoverTimer: number | null = null;\nlet currentTarget: HTMLImageElement | null = null;\nlet isPanelDisabledByIcon = false; // アイコンによって非表示にされたかどうかのフラグ\n\n// チェック済み画像のリスト\ninterface CheckedImage {\n  url: string;           // 画像URL\n  hasMetadata: boolean;  // メタデータの有無\n  baseUrl: string | null; // オリジナル画像のベースURL\n}\nconst checkedImages: Map<string, CheckedImage> = new Map();\n\nconsole.log(\"/////////////////// PIXIV-METADATA-VIEWER\");\n\n/**\n * 画像URLがターゲットパターンにマッチするか確認\n */\nfunction isTargetImage(url: string): boolean {\n  return CONFIG.IMAGE_URL_PATTERNS.some(pattern => pattern.test(url));\n}\n\n/**\n * 画像URLからオリジナル画像のベースURLを取得\n */\nfunction getOriginalBaseUrl(imgUrl: string): string | null {\n  for (const pattern of CONFIG.IMAGE_URL_PATTERNS) {\n    const match = imgUrl.match(pattern);\n    if (match && match[1]) {\n      return `https://i.pximg.net/img-original/img/${match[1]}`;\n    }\n  }\n  return null;\n}\n\n/**\n * メタデータ取得処理\n */\nasync function fetchMetadata(imageUrls: string[]): Promise<any> {\n  if (!imageUrls || imageUrls.length === 0) {\n    throw new Error('画像URLが指定されていません');\n  }\n\n  // console.log(\"fetchMetadata\", imageUrls);\n\n  // バックグラウンドスクリプトにメッセージを送信\n  return new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage(\n      { type: 'GET_METADATA', imageUrls },\n      (response) => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n        \n        if (response.success) {\n          resolve(response.metadata);\n        } else {\n          reject(new Error(response.error || 'メタデータの取得に失敗しました'));\n        }\n      }\n    );\n  });\n}\n\n/**\n * 画像処理のメイン関数\n */\nasync function processImage(imgElement: HTMLImageElement): Promise<void> {\n  // アイコンによって非表示にされている場合は処理をスキップ\n  if (isPanelDisabledByIcon) {\n    return;\n  }\n\n  try {\n    const imgUrl = imgElement.src;\n    \n    // チェック済みリストを確認\n    if (checkedImages.has(imgUrl)) {\n      const checkedImage = checkedImages.get(imgUrl)!;\n      \n      // メタデータがある場合はバッジを付ける\n      if (checkedImage.hasMetadata) {\n        // console.log(\"[PMV] ホバー: チェック済み画像、バッジを付与:\", imgUrl);\n        createBadge(imgElement);\n      }\n      \n      // チェック済みの場合でもパネルは表示する必要がある\n      // ここでメタデータを再取得する必要がある\n      const originalBaseUrl = checkedImage.baseUrl;\n      const originalImages: string[] = [];\n      \n      if (originalBaseUrl) {\n        CONFIG.IMAGE_FORMATS.forEach(format => {\n          originalImages.push(`${originalBaseUrl}.${format}`);\n        });\n        \n        try {\n          const metadata = await fetchMetadata(originalImages);\n          showPanel(metadata);\n        } catch (error) {\n          // エラーの場合は空のパネルを表示\n          const errorMetadata = {\n            isNotPng: false,\n            parsed: { items: [] }\n          };\n          showPanel(errorMetadata);\n        }\n      }\n      \n      return;\n    }\n    \n    // オリジナル画像URLを取得して出力\n    const originalBaseUrl = getOriginalBaseUrl(imgUrl);\n    const originalImages: string[] = [];\n    \n    if (originalBaseUrl) {\n      // 各形式のURLを出力\n      CONFIG.IMAGE_FORMATS.forEach(format => {\n        originalImages.push(`${originalBaseUrl}.${format}`);\n      });\n    }\n    \n    // メタデータ取得\n    try {\n      const metadata = await fetchMetadata(originalImages);\n      \n      // メタデータパネルを表示\n      showPanel(metadata);\n\n      // メタデータの有無を判定\n      const hasMetadata = metadata.parsed.items.length >= 2 || \n                         (metadata.parsed.items.length > 0 && metadata.parsed.items[0].keyword === 'parameters');\n      \n      // チェック済みリストに追加\n      checkedImages.set(imgUrl, {\n        url: imgUrl,\n        hasMetadata,\n        baseUrl: originalBaseUrl\n      });\n      \n      // メタデータバッジを表示\n      if (hasMetadata) {\n        createBadge(imgElement);\n      }\n\n    } catch (error) {\n      // console.log('[PMV] メタデータ取得エラー:', error);\n      \n      // エラーの場合でもパネルを表示\n      const errorMetadata = {\n        isNotPng: false,\n        parsed: { items: [] }\n      };\n      \n      // エラーメッセージに基づいて適切なフラグを設定\n      if (error instanceof Error && error.message && error.message.includes('HTTP 404')) {\n        // 画像が見つからない場合\n        errorMetadata.isNotPng = true;\n      }\n      \n      showPanel(errorMetadata);\n      \n      // エラーの場合もチェック済みリストに追加（メタデータなしとして）\n      checkedImages.set(imgUrl, {\n        url: imgUrl,\n        hasMetadata: false,\n        baseUrl: originalBaseUrl\n      });\n    }\n    \n  } catch (error) {\n    console.log('[PMV] 画像処理エラー:', error);\n    \n    // 画像処理エラーの場合でもパネルを表示\n    const errorMetadata = {\n      isNotPng: true,\n      parsed: { items: [] }\n    };\n    \n    showPanel(errorMetadata);\n  }\n}\n\n/**\n * メタデータのある画像にバッジを付ける\n */\nasync function processAllImages(imgElement: HTMLImageElement): Promise<void> {\n  // アイコンによって非表示にされている場合は処理をスキップ\n  if (isPanelDisabledByIcon) {\n    return;\n  }\n\n  const imgUrl = imgElement.src;\n  // console.log(\"processAllImages\", imgUrl);\n  \n  // チェック済みリストを確認\n  if (checkedImages.has(imgUrl)) {\n    const checkedImage = checkedImages.get(imgUrl)!;\n    \n    // メタデータがある場合はバッジを付ける\n    if (checkedImage.hasMetadata) {\n      // console.log(\"[PMV] チェック済み画像、バッジを付与:\", imgUrl);\n      createBadge(imgElement);\n    } else {\n      // console.log(\"[PMV] チェック済み画像、メタデータなし:\", imgUrl);\n    }\n    \n    return;\n  }\n  \n  // オリジナル画像URLを取得して出力\n  const originalBaseUrl = getOriginalBaseUrl(imgUrl);\n  const originalImages: string[] = [];\n  \n  if (originalBaseUrl) {\n    // 各形式のURLを出力\n    CONFIG.IMAGE_FORMATS.forEach(format => {\n      originalImages.push(`${originalBaseUrl}.${format}`);\n    });\n  }\n  \n  try {\n    // console.log(\"[PMV] 画像を取得:\", originalImages);\n    // メタデータ取得\n    const metadata = await fetchMetadata(originalImages);\n    \n    // メタデータの有無を判定\n    const hasMetadata = metadata.parsed.items.length >= 2 || \n                        (metadata.parsed.items.length > 0 && metadata.parsed.items[0].keyword === 'parameters');\n    \n    // チェック済みリストに追加\n    checkedImages.set(imgUrl, {\n      url: imgUrl,\n      hasMetadata,\n      baseUrl: originalBaseUrl\n    });\n    \n    // メタデータバッジを表示\n    if (hasMetadata) {\n      createBadge(imgElement);\n    }\n  } catch (error) {\n    // console.log(\"[PMV] メタデータ取得エラー:\", error);\n    \n    // エラーの場合もチェック済みリストに追加（メタデータなしとして）\n    checkedImages.set(imgUrl, {\n      url: imgUrl,\n      hasMetadata: false,\n      baseUrl: originalBaseUrl\n    });\n  }\n}\n\n\n\n/**\n * ページ内の画像をチェックしてバッジを付ける\n */\nfunction checkImagesAndAddBadges(): void {\n  const topSideMenuImages = document.querySelectorAll('.__top_side_menu_body img');\n\n  topSideMenuImages.forEach(imgElement => {\n    const imgUrl = (imgElement as HTMLImageElement).src;\n    if (isTargetImage(imgUrl)) {\n      processAllImages(imgElement as HTMLImageElement);\n    }\n  });\n}\n\n// DOM変更を監視するためのタイマーID\nlet mutationDebounceTimer: number | null = null;\n\n/**\n * DOM変更を監視するMutationObserverの設定\n */\nfunction setupMutationObserver(): void {\n  // MutationObserverのコールバック\n  const mutationCallback = (mutations: MutationRecord[]) => {\n    // 変更があった場合、遅延処理を行う\n    if (mutationDebounceTimer) {\n      clearTimeout(mutationDebounceTimer);\n    }\n    \n    // 1000msの遅延を入れて画像チェックを実行\n    mutationDebounceTimer = window.setTimeout(() => {\n      // console.log(\"[PMV] DOM変更を検知、画像チェックを実行します\");\n      checkImagesAndAddBadges();\n    }, 1000);\n  };\n  \n  // MutationObserverの設定\n  const observer = new MutationObserver(mutationCallback);\n  \n  // 監視オプション\n  const config = {\n    childList: true,  // 子ノードの変更を監視\n    subtree: true,    // 子孫ノードの変更も監視\n  };\n  \n  // bodyの変更を監視開始\n  observer.observe(document.body, config);\n  \n  // console.log(\"[PMV] MutationObserver設定完了\");\n}\n\n/**\n * 初期化\n */\nfunction initialize(): void {\n  console.log(\"[PMV] initialize\");\n\n  // ページ内の画像をチェックしてバッジを付ける\n  setTimeout(() => {\n    checkImagesAndAddBadges();\n    \n    // 初回チェック後にMutationObserverを設定\n    setupMutationObserver();\n  }, 1000);\n\n  // 画像ホバー検出\n  document.addEventListener('mouseover', (e) => {\n    const target = e.target as HTMLElement;\n    if (target.tagName === 'IMG') {\n      const imgElement = target as HTMLImageElement;\n      const imgUrl = imgElement.src;\n      // console.log(\"[PMV] initialize src\", imgUrl);\n      \n      // URLパターンチェック\n      if (isTargetImage(imgUrl)) {\n        // console.log(\"[PMV] initialize isTarget\");\n        // 前のタイマーをクリア\n        if (hoverTimer) clearTimeout(hoverTimer);\n        \n        // 新しいタイマーをセット（0.5秒遅延）\n        hoverTimer = window.setTimeout(() => {\n          currentTarget = imgElement;\n          processImage(imgElement);\n        }, CONFIG.HOVER_DELAY);\n      }\n    }\n  });\n\n  // // 画像マウスアウト検出\n  // document.addEventListener('mouseout', (e) => {\n  //   const target = e.target as HTMLElement;\n  //   if (target.tagName === 'IMG') {\n  //     // タイマーをクリア\n  //     if (hoverTimer) {\n  //       clearTimeout(hoverTimer);\n  //       hoverTimer = null;\n  //     }\n      \n  //     hidePanel();\n  //   }\n  // });\n}\n\n// 初期化実行\ninitialize();\n\n/**\n * メッセージハンドラ\n */\nchrome.runtime.onMessage.addListener((message) => {\n  // パネル表示/非表示の切り替え\n  if (message && message.type === 'TOGGLE_PANEL') {\n    const panel = document.querySelector('.d2-meta-panel');\n    if (panel) {\n      const isShow = panel.getAttribute('data-is-show') === 'true';\n      if (isShow) {\n        // パネルが表示されている場合は非表示にする\n        panel.setAttribute('data-is-show', 'false');\n        hidePanel();\n        // アイコンによって非表示にされたフラグをセット\n        isPanelDisabledByIcon = true;\n      } else {\n        // パネルが非表示の場合は表示する\n        // 現在のメタデータがあれば表示、なければ空のパネルを表示\n        const metadata = getCurrentMetadata() || {\n          isNotPng: false,\n          parsed: { items: [] }\n        };\n        showPanel(metadata);\n        // アイコンによって非表示にされたフラグを解除\n        isPanelDisabledByIcon = false;\n      }\n    }\n  }\n  \n  // デバッグ情報の出力\n  if (message && message.type === 'DEBUG_INFO') {\n    // デバッグ情報をコンソールに出力\n    console.log('[PMV Debug]', message.label || 'デバッグ情報:');\n    \n    // データがある場合は詳細を出力\n    if (message.data) {\n      console.log(message.data);\n    }\n    \n    // エラー情報がある場合は出力\n    if (message.error) {\n      console.error('[PMV Error]', message.error);\n    }\n  }\n});\n"],"names":["CONFIG","createBadge","imgElement","imgParent","badge","computedStyle","escapeHtml","text","extractPromptA1111","parameters","summary","params","negMatch","paramsLine","pair","idx","k","v","extractPromptNAI","comment","jsonText","jsonStr","jsonObj","_b","_a","_d","_c","charaCption","_f","_e","e","extractSummary","items","item","currentMetadata","hideTimer","createPanel","existingPanel","panel","resizeHandleTop","navContainer","positionButton","closeButton","hidePanel","content","promptSection","originalSection","resizeHandleBottom","startY","startHeight","resizePanelTop","stopResize","resizePanelBottom","newHeight","renderPanelContent","metadata","hasMetadata","promptHtml","paramsHtml","originalHtml","showPanel","getCurrentMetadata","hoverTimer","isPanelDisabledByIcon","checkedImages","isTargetImage","url","pattern","getOriginalBaseUrl","imgUrl","match","fetchMetadata","imageUrls","resolve","reject","response","processImage","checkedImage","originalBaseUrl","originalImages","format","error","errorMetadata","processAllImages","checkImagesAndAddBadges","mutationDebounceTimer","setupMutationObserver","mutationCallback","mutations","observer","config","initialize","target","message"],"mappings":"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"}